
#pragma once

#define GLM_FORCE_RADIANS

/*
 * The perspective projection matrix generated by GLM will use the OpenGL depth range of -1.0 to 1.0 by default.
 * We need to configure it to use the Vulkan range of 0.0 to 1.0 using the GLM_FORCE_DEPTH_ZERO_TO_ONE definition.
 */
#define GLM_FORCE_DEPTH_ZERO_TO_ONE

#include <GpuImage.h>
#include <memory>
#include <optional>
#include <vector>
#include <Fbx/FbxLoader.h>
#include <GLFW/glfw3.h>
#include <glm/glm.hpp>
#include <glm/mat4x4.hpp>
#include <vulkan/vulkan.h>

struct QueueFamilyIndices
{
    std::optional<uint32_t> graphicsFamily;
    std::optional<uint32_t> presentFamily;
};

struct SwapChainSupportDetails
{
    VkSurfaceCapabilitiesKHR capabilities{};
    std::vector<VkSurfaceFormatKHR> formats;
    std::vector<VkPresentModeKHR> presentModes;
};

/*
 * Scalars have to be aligned by N (= 4 bytes given 32 bit floats).
 * A vec2 must be aligned by 2N (= 8 bytes)
 * A vec3 or vec4 must be aligned by 4N (= 16 bytes)
 * A nested structure must be aligned by the base alignment of its members rounded up to a multiple of 16.
 * A mat4 matrix must have the same alignment as a vec4.
 */
struct UniformBufferObject
{
    // Example, if a vec2 is added at the beginning
    // glm::vec2 foo;
    // alignas(16) glm::mat4 model;

    alignas(16) glm::mat4 model;
    alignas(16) glm::mat4 view;
    alignas(16) glm::mat4 proj;
};

// Command buffer and synchronization objects per frame in the swap chain
struct FrameObjects
{
    VkCommandBuffer commandBuffer;
    VkSemaphore imageAvailableSemaphore;
    VkSemaphore renderFinishedSemaphore;
    VkFence inFlightFence;

    // Uniform attribute/data stuff
    VkBuffer uniformBuffer;
    VkDeviceMemory uniformBuffersMemory;
    void* uniformBuffersMapped;

    VkDescriptorSet descriptorSet;

    void CleanUp(VkDevice device);
};

class Renderer
{
    friend class GpuImage;
public:
    void Init(GLFWwindow* window);

    void Cleanup();

    void DrawFrame();

    void OnExitMainLoop();

    static void FramebufferResizeCallback(GLFWwindow* window, int width, int height);

private:
    void InitVulkan();
    void InitImGui();
    void InitImGuiResources();

    VkImageView CreateImageView(VkImage image, VkFormat format, VkImageAspectFlags aspectFlags);
    void CreateTextureSampler();
    void CreateDepthResources();
    bool HasStencilComponent(VkFormat format);
    VkFormat FindDepthFormat();
    VkFormat FindSupportedFormat(const std::vector<VkFormat>& candidates, VkImageTiling tiling,
                                 VkFormatFeatureFlags features);
    void LoadModel();

    void CreateInstance();
    void CreateSurface();
    void PickPhysicalDevice();
    void CreateLogicalDevice();
    void CreateRenderPass();
    void CreateGraphicsPipeline();
    void CreateCommandPool();
    void CreateCommandBuffers();
    void CreateSyncObjects();

    void CreateImage(uint32_t width, uint32_t height, VkFormat format, VkImageTiling tiling, VkImageUsageFlags usage,
        VkMemoryPropertyFlags properties, VkImage& image, VkDeviceMemory& imageMemory);
    VkCommandBuffer BeginSingleTimeCommands();
    void EndSingleTimeCommands(VkCommandBuffer commandBuffer);


    void UpdateUniformBuffer(uint32_t currentImage);
    void RecordCommandBuffer(VkCommandBuffer commandBuffer, uint32_t imageIndex);

    bool IsDeviceSuitable(VkPhysicalDevice device);
    bool CheckDeviceExtensionSupport(VkPhysicalDevice device);
    VkSurfaceFormatKHR ChooseSwapSurfaceFormat(const std::vector<VkSurfaceFormatKHR>& availableFormats);
    VkPresentModeKHR ChooseSwapPresentMode(const std::vector<VkPresentModeKHR>& availablePresentModes);
    VkExtent2D ChooseSwapExtent(const VkSurfaceCapabilitiesKHR& capabilities, GLFWwindow* window);
    SwapChainSupportDetails QuerySwapChainSupport(VkPhysicalDevice device);
    QueueFamilyIndices FindQueueFamiliesWithSurfaces(VkPhysicalDevice device);

    void CreateDescriptorPool();
    void CreateDescriptorSets();
    void CleanupSwapChain();
    void RecreateSwapChain();
    void CreateSwapChain();
    void CreateImageViews();
    void CreateFramebuffers();

    void CreateBuffer(VkDeviceSize size, VkBufferUsageFlags usage, VkMemoryPropertyFlags properties,
        VkBuffer& buffer, VkDeviceMemory& bufferMemory);
    void CreateVertexBuffer();
    void CreateIndexBuffer();
    void CopyBuffer(VkBuffer srcBuffer, VkBuffer dstBuffer, VkDeviceSize size);
    void TransitionImageLayout(VkImage image, VkFormat format, VkImageLayout oldLayout, VkImageLayout newLayout);
    void CopyBufferToImage(VkBuffer buffer, VkImage image, uint32_t width, uint32_t height);
    void CreateDescriptorSetLayout();

    VkBuffer m_vertexBuffer = VK_NULL_HANDLE;
    VkDeviceMemory m_vertexBufferMemory = VK_NULL_HANDLE;

    VkBuffer m_indexBuffer = VK_NULL_HANDLE;
    VkDeviceMemory m_indexBufferMemory = VK_NULL_HANDLE;

    GpuImage m_objectTexture;
    VkSampler m_textureSampler = VK_NULL_HANDLE;

    GpuImage m_imGuiFontTexture;
    VkSampler m_imGuiFontSampler = VK_NULL_HANDLE;


    GpuImage m_depth;


    bool m_enableValidationLayers = true;

    const std::vector<const char*> m_validationLayers = {
        "VK_LAYER_KHRONOS_validation"
    };

    const std::vector<const char*> m_deviceExtensions = {
        VK_KHR_SWAPCHAIN_EXTENSION_NAME
    };

    std::unique_ptr<Asset::FbxLoader> m_meshLoader;

    GLFWwindow* m_window = nullptr;
    VkPhysicalDevice m_physicalDevice = VK_NULL_HANDLE;
    VkInstance m_instance = VK_NULL_HANDLE;
    VkDevice m_device = VK_NULL_HANDLE;
    VkQueue m_graphicsQueue = VK_NULL_HANDLE;
    VkSurfaceKHR m_surface = VK_NULL_HANDLE;
    VkQueue m_presentQueue = VK_NULL_HANDLE;
    VkSwapchainKHR m_swapChain = VK_NULL_HANDLE;
    std::vector<VkImage> m_swapChainImages; // no cleanup needed    
    std::vector<VkImageView> m_swapChainImageViews;
    VkDescriptorSetLayout m_descriptorSetLayout = VK_NULL_HANDLE;
    VkDescriptorPool m_descriptorPool = VK_NULL_HANDLE;
    VkPipelineLayout m_pipelineLayout = VK_NULL_HANDLE;
    VkRenderPass m_renderPass = VK_NULL_HANDLE;
    VkPipeline m_graphicsPipeline = VK_NULL_HANDLE;
    std::vector<VkFramebuffer> m_swapChainFramebuffers;
    VkCommandPool m_commandPool = VK_NULL_HANDLE;

    bool m_framebufferResized = false;

    uint32_t m_queueRenderFamily = 0;

    const int MAX_FRAMES_IN_FLIGHT = 2;

    void CreateUniformBuffers();

    std::vector<FrameObjects> m_frameObjects;
    uint32_t m_currentFrame = 0;

    // Swap chain related data
    VkFormat m_swapChainImageFormat = VK_FORMAT_UNDEFINED;
    VkExtent2D m_swapChainExtent{};

    std::vector<char> ReadFile(const char* filename);
    VkShaderModule CreateShaderModule(const std::vector<char>& code);
    uint32_t FindMemoryType(uint32_t typeFilter, VkMemoryPropertyFlags properties);
};
